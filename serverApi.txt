getPath()
	{
	  startPlace: "string",
	  endPlace: "string"
	}

	returns
	{
	  startCoord: [ lattitude, longitude ],
	  endCoord: [ lattitude, longitude ],
	  floorPlan: "url",
	  buildingInfo:
	}
getCustomPath()
	{
	  startCoord: [ lat, long ],
	  endPlace: "string"
	}
	returns
	{
	  startCoord: [ lattitude, longitude ],
	  endCoord: [ lattitude, longitude ],
	  floorPlan: "url",
	  buildingInfo:
	}
getSavedPaths()
	{
	  username:"username"
	  password:"password",
	}

loadPath()
	{
	  username:"username",
	  password:"password",
	  pathid: "path" //or path points/ locations
	}
	returns
	{
	  startCoord: [ lattitude, longitude ],
	  endCoord: [ lattitude, longitude ],
	  floorPlan: "url",
	  buildingInfo:
	}

loadTour()
	{
	  tourname: "name"
	}
	returns
	{
	  path: [ [lat,long], [lat,long],,, ],
	  places: [ place:{ coord:[lat,long], name:"string", info:"string", image:"url"(optional) }, , ]
	}

savePath()
	{
	  username: "username", //some way to know which user it is
	  coordinates: [,,]
	}

	returns failed or success

getBuildingInfo() //possibly

initialize() // launches when the app starts up

	returns
	all the needed start up info, and a way of telling when the database was last updated
		this allows the app to only update the info if it is out of date

register() && login()
	{
	  username: "username",
	  password: "password"
	}

	returns something that is useful

getMapKey() //might not be necessary if already in the html page 

	returns
	{
	  mapKey: "key" 
	}

saveSchedule()
	{
	  username:"username",
	  password:"password",
	  classes: [,,]
	}
	returns "failed" or "success" 

mapSchedule()
	{
	  username:"username"
	  password:"password",
	}
	returns 
	"no saved schedule" or some other failure message
	or 
	{
	  //path of schedule
	}