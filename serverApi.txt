getPath()
	{
	  startPlace: "building_id",
	  endPlace: "building_id"
	}

	returns
	{
	  startCoord: { id: id, building_id: buildingID, latitude: number, longitude: number, in_DB: T/F },
	  endCoord: { id: id, building_id: buildingID, latitude: number, longitude: number, in_DB: T/F },
	  floorPlans: [floor1_url, floor2_url, ...]
	  buildingInfo: { 
          ID: building_id
          name: full_name
          phone_number: phone_number
          hours: hours
      }
	}
getCustomPath()
	{
	  start_latitude: number,
      start_longitude: number,
	  endPlace: "building_id" (e.g. TMCB)
	}
	returns
	{
	  startCoord: { id: id, building_id: buildingID, latitude: number, longitude: number, in_DB: T/F },
	  endCoord: { id: id, building_id: buildingID, latitude: number, longitude: number, in_DB: T/F },
	  floorPlans: [floor1_url, floor2_url, ...]
	  buildingInfo: { 
          ID: building_id
          name: full_name
          phone_number: phone_number
          hours: hours
      }
	}
getSavedSchedules()
	{
	  username:"username"
	}
	return
    {
      paths: [path1, path2...]
    }
	

loadSchedule()
	{
	  username: "string",
	  schedule_name: "string" 
	}
	returns
	{
	  path: [ course:{name:"nameOfCourse",time:"hh:mm am/pm",days:"MTWThF",building_id:"acronym", room:"roomNum" }, ... , course:{ ... } ],
	  floorPlan: "url", ??
	  buildingInfo: ??
	}

getAllBuildings()
{
	return [{ 
          ID: building_id
          name: full_name
          phone_number: phone_number
          hours: hours
      }]
}
    
saveSchedule()
	{
	  username:"username",
	  scheduale_name: "name",
	  classes: [{name:"nameOfCourse",time:"hh:mm am/pm",days:"MTWThF",building_id:"acronym", room:"roomNum" }, ... , course:{ ... } ],
]
	}
	returns "failed" or "success"

#loadTour will happen by calling loadPath with "tour_guide" as username

getBuildingInfo()
    {
      building_id: "building_id"
    }
    
    returns {
      building_id: "building_id"
      name: "name"
      phone_number: "phone_number"
      hours: "hours"
    }

verifyUser()
    {
      username: "username"
      password: "password"
    }
    
    returns boolean

createUser()
	{
	  username: "username",
	  password: "password"
	}

	returns ??

getMapKey() //might not be necessary if already in the html page  ??

	returns
	{
	  mapKey: "key" 
	} 

mapSchedule() ??
	{
      courses: [course1, course2, ...]
	}
	returns 
	"no saved schedule" or some other failure message
	or 
	{
	  path: [ coord:{ latitude: number, longitude: number }, ... , coord:{ latitude: number, longitude: number } ]
	}
